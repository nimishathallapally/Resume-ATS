import streamlit as st
import google.generativeai as genai
import os
import PyPDF2 as pdf

from dotenv import load_dotenv

import json

# Load all environment variables
load_dotenv()

# os.getenv() is used to access environment variables
# The configure method is used to set up the genai module with the provided api_key
# done to authenticate requests to an API that requires an API key for access.
# configures the genai module to use the API key stored in the GOOGLE_API_KEY environment variable.

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Getting Ressponse From Gemini

def get_gemini_response(input):

    # initialise a generative model named 'gemini-pro' from genai library
    model=genai.GenerativeModel('gemini-pro')

    # process input and produce output using the generate_content method
    response=model.generate_content(input)

    # when generate_content() methos is called it returns an object, referred to as response
    # 'response' has attributes 'content' or 'text' used to store textual response generated by the model 

    if hasattr(response,'content'):
        return response.content
    elif hasattr(response,'text'):
        return response.text
    else:
        raise ValueError("Unexpected response format generated from the model.")
    
# Extract text from the PDF file

def extract_text_pdf(file):
    reader=pdf.PdfReader(file)
    text=""
    # Read text page by page, extract text from each page and concatanate it to a single string
    for page_num in range(len(reader.pages)):
        page=reader.pages[page_num]

        # Append empty string if no text is found
        text+=page.extract_text() or ""
    return text

# Format the response generated to the desired format

def format_response(response):
    try:
        response_text=json.loads(response) # takes the string response and parses it into a Python dictionary.

        # Extract Key value Pairs
        formatted_response=(
            f"JD Match: {response_text['JD Match']}\n\n\n"
            f"Missing Keywords:\n {response_text['Missing Keywords']}\n\n\n"
            f"Profile Summary:\n {response_text['Profile Summary']}\n\n\n"
            f"Suggestion:\n {response_text['Suggestion']}\n"
        )
        return formatted_response
        # If response is not a valid JSON string, json.loads() raises a json.JSONDecodeError.
    except(json.JSONDecodeError,KeyError) as e:
        return f"Error in formatting response: {e}"
    
# Prompt Template

input_prompt='''
    You are an advanced ATS (Application Tracking System) with extensive expertise in the tech industry, encompassing software engineering, data science, data analysis, and big data engineering. Your objective is to assess the provided resume against the specified job description. Acknowledge the fiercely competitive job market and offer comprehensive guidance for optimizing the resume.
    you should provide the best assistance for improving the resumes. Assign the percentage matching based on JD and the missing keywords with high accuracy.
    resume: {text}
    description: {jd}

    I want the response in one single string having the structure
    {{"JD Match": "%", "Missing Keywords": [], "Profile Summary": "",  "Suggestion": ""}}
'''

# Streamlit App
st.title("Smart ATS")
st.text("Check your Resume ATS")

# Create text area to paste the job description
jd=st.text_area("Paste the job description",height=200)

# file_uploader widget to upload resume in .pdf format
uploaded_file=st.file_uploader("Upload your resume",type="pdf",help="Please upload the pdf")

# Button to trigger resume evaluation process
submit=st.button("Submit")

if submit:
    if uploaded_file is not None:
        # Extract text from the pdf file
        text=extract_text_pdf(uploaded_file)

        # substitute resume text and jd in the input prompt
        formatted_prompt=input_prompt.format(text=text,jd=jd)

        try:
            # Obtain response from the API
            response=get_gemini_response(formatted_prompt)

            # Format the response
            formatted_response=format_response(response)

            st.subheader("Response")
            st.text_area("Gemini Response",formatted_response,height=500)
        except ValueError as e:
            st.error(f"Error processing the response: {e}")
    else:
        st.error("Please upload a Resume file")